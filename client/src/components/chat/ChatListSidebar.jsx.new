import { useState, useEffect } from 'react';
import { useChat } from '../../context/ChatContext';
import { accessChat, fetchChats } from '../../api/chatApi';
import { 
  Avatar, 
  Badge, 
  Box, 
  Button, 
  Divider, 
  IconButton, 
  List, 
  ListItem, 
  ListItemAvatar, 
  ListItemButton, 
  ListItemText, 
  TextField, 
  Typography, 
  InputAdornment,
  Menu,
  MenuItem
} from '@mui/material';
import { 
  Search as SearchIcon, 
  Add as AddIcon, 
  MoreVert as MoreVertIcon,
  Archive as ArchiveIcon
} from '@mui/icons-material';
import { format } from 'date-fns';
import NewGroupChatModal from './NewGroupChatModal';
import UserSearchDrawer from './UserSearchDrawer';
import notificationService from '../../services/MessageNotificationService';

const ChatListSidebar = () => {
  const { 
    user, 
    chats, 
    setChats, 
    selectedChat, 
    setSelectedChat, 
    notifications, 
    setNotifications, 
    isLoading, 
    setIsLoading,
    getUnreadCountForChat: contextGetUnreadCountForChat 
  } = useChat();
  
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredChats, setFilteredChats] = useState([]);
  const [openGroupModal, setOpenGroupModal] = useState(false);
  const [openUserSearch, setOpenUserSearch] = useState(false);
  const [unreadMessagesByChatId, setUnreadMessagesByChatId] = useState({});
  const [hiddenChats, setHiddenChats] = useState([]);
  const [menuAnchorEl, setMenuAnchorEl] = useState(null);
  const [selectedChatForMenu, setSelectedChatForMenu] = useState(null);

  // Subscribe to notification service for unread counts
  useEffect(() => {
    console.log('ChatListSidebar subscribing to notification service');
    
    // Subscribe to notification service 
    const unsubscribe = notificationService.subscribe(update => {
      console.log('ChatListSidebar received update:', update);
      setUnreadMessagesByChatId(update.byChatId);
    });
    
    // Listen for notification service ready events
    const handleServiceReady = () => {
      console.log('ChatListSidebar: Notification service ready');
      const notifState = {
        byChatId: notificationService.unreadMessages,
        total: notificationService.totalUnreadCount
      };
      console.log('ChatListSidebar: Current notification state:', notifState);
      setUnreadMessagesByChatId(notifState.byChatId);
    };
    
    window.addEventListener('textlaire_notification_service_ready', handleServiceReady);
    
    // Force re-fetch initial state after a brief delay
    setTimeout(() => {
      const initialState = {
        byChatId: notificationService.unreadMessages,
        total: notificationService.totalUnreadCount
      };
      console.log('ChatListSidebar: Force fetching initial state:', initialState);
      setUnreadMessagesByChatId(initialState.byChatId);
    }, 500);
    
    return () => {
      if (unsubscribe) unsubscribe();
      window.removeEventListener('textlaire_notification_service_ready', handleServiceReady);
      console.log('ChatListSidebar unsubscribed from notification service');
    };
  }, []);

  // Load hidden chats from local storage
  useEffect(() => {
    const storedHiddenChats = localStorage.getItem('hiddenChats');
    if (storedHiddenChats) {
      try {
        setHiddenChats(JSON.parse(storedHiddenChats));
      } catch (error) {
        console.error('Error loading hidden chats:', error);
      }
    }
  }, []);

  // Save hidden chats to local storage whenever they change
  useEffect(() => {
    if (hiddenChats.length > 0) {
      localStorage.setItem('hiddenChats', JSON.stringify(hiddenChats));
    }
  }, [hiddenChats]);

  // Filter chats based on search term and hidden status
  useEffect(() => {
    // Safety check: ensure chats is always an array
    if (!Array.isArray(chats)) {
      console.warn('Chats is not an array:', chats);
      setFilteredChats([]);
      return;
    }
    
    // First filter out hidden chats
    const visibleChats = chats.filter(chat => !hiddenChats.includes(chat._id));
    
    // Then apply search term filtering
    if (searchTerm.trim() === '') {
      setFilteredChats(visibleChats);
    } else {
      const filtered = visibleChats.filter((chat) => {
        // For group chats, search by group name
        if (chat.isGroupChat) {
          return chat.chatName.toLowerCase().includes(searchTerm.toLowerCase());
        }
        // For one-on-one chats, search by the other user's name
        const otherUser = chat.users.find((u) => u._id !== user._id);
        return otherUser?.name.toLowerCase().includes(searchTerm.toLowerCase());
      });
      setFilteredChats(filtered);
    }
  }, [searchTerm, chats, user, hiddenChats]);

  // Refresh chats
  const refreshChats = async () => {
    setIsLoading(true);
    try {
      const data = await fetchChats();
      
      // Ensure data is valid before setting chats
      if (Array.isArray(data)) {
        setChats(data);
      } else {
        console.error('fetchChats did not return an array:', data);
        // Set to empty array as a fallback
        setChats([]);
      }
    } catch (error) {
      console.error('Error refreshing chats:', error);
      // Set to empty array on error
      setChats([]);
    } finally {
      setIsLoading(false);
    }
  };

  // Handle chat selection
  const handleSelectChat = (chat) => {
    console.log('ChatListSidebar: Selecting chat:', chat._id);
    
    // Set the selected chat in the context
    setSelectedChat(chat);
    
    // Save selected chat ID to localStorage for notification handling
    try {
      localStorage.setItem('selectedChatId', chat._id);
    } catch (error) {
      console.error('Error saving selected chat ID:', error);
    }
  };

  // Format timestamp for last message
  const formatTimestamp = (timestamp) => {
    if (!timestamp) return '';
    
    try {
      const date = new Date(timestamp);
      const now = new Date();
      
      // If today, show only time
      if (date.toDateString() === now.toDateString()) {
        return format(date, 'h:mm a');
      }
      
      // If this week, show day name
      const daysDiff = Math.floor((now - date) / (1000 * 60 * 60 * 24));
      if (daysDiff < 7) {
        return format(date, 'EEE');
      }
      
      // Otherwise show date
      return format(date, 'MMM d');
    } catch (error) {
      console.error('Error formatting timestamp:', error);
      return '';
    }
  };

  // Function to get chat name
  const getChatName = (chat) => {
    if (!chat) return '';
    
    if (chat.isGroupChat) {
      return chat.chatName || 'Group Chat';
    }
    
    const otherUser = chat.users.find((u) => u._id !== user?._id);
    return otherUser?.name || 'Chat';
  };

  // Function to get latest message text preview
  const getLatestMessagePreview = (chat) => {
    if (!chat.latestMessage) return 'No messages yet';
    
    const latest = chat.latestMessage;
    
    if (latest.isSystemMessage) {
      return `System: ${latest.content}`;
    }
    
    // If message has attachments
    if (latest.attachments && latest.attachments.length > 0) {
      if (latest.content) {
        return `${latest.content} [attachment]`;
      }
      return `[attachment]`;
    }
    
    return latest.content || '';
  };
  
  // Get unread count for a chat
  const getUnreadCountForChat = (chatId) => {
    if (!chatId) return 0;
    
    // First check local state for UI reactivity
    if (unreadMessagesByChatId && unreadMessagesByChatId[chatId]) {
      return unreadMessagesByChatId[chatId].length || 0;
    }
    
    // Check context if available
    if (typeof contextGetUnreadCountForChat === 'function') {
      return contextGetUnreadCountForChat(chatId);
    }
    
    return 0; // Default fallback value
  };
  
  // Handle user selection from search
  const handleUserSelect = async (userId) => {
    if (!userId) return;
    
    try {
      setIsLoading(true);
      // Create or fetch a chat with this user
      const data = await accessChat(userId);
      
      if (!chats.find((c) => c._id === data._id)) {
        setChats([data, ...chats]);
      }
      
      // If this chat was previously hidden, unhide it
      if (hiddenChats.includes(data._id)) {
        removeFromHiddenChats(data._id);
      }
      
      setSelectedChat(data);
      setOpenUserSearch(false); // Close drawer after selection
    } catch (error) {
      console.error('Error accessing chat:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Handle opening the menu
  const handleMenuOpen = (event, chat) => {
    event.stopPropagation(); // Prevent chat selection
    setMenuAnchorEl(event.currentTarget);
    setSelectedChatForMenu(chat);
  };

  // Handle closing the menu
  const handleMenuClose = () => {
    setMenuAnchorEl(null);
    setSelectedChatForMenu(null);
  };

  // Hide a chat from the list
  const hideChat = (chatId) => {
    if (!chatId) return;
    
    // Add to hidden chats if not already there
    if (!hiddenChats.includes(chatId)) {
      setHiddenChats([...hiddenChats, chatId]);
    }
    
    // If the hidden chat is currently selected, deselect it
    if (selectedChat && selectedChat._id === chatId) {
      setSelectedChat(null);
    }
    
    handleMenuClose();
  };

  // Remove a chat from hidden list
  const removeFromHiddenChats = (chatId) => {
    setHiddenChats(hiddenChats.filter(id => id !== chatId));
  };
  
  return (
    <Box sx={{ width: '100%', height: '100%', borderRight: 1, borderColor: 'divider', display: 'flex', flexDirection: 'column' }}>
      {/* Header */}
      <Box sx={{ p: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
        <Typography variant="h6" fontWeight="bold">Messages</Typography>
        <Box>
          <IconButton onClick={() => setOpenUserSearch(true)}>
            <AddIcon />
          </IconButton>
        </Box>
      </Box>
      
      {/* Search */}
      <Box sx={{ px: 2, py: 1 }}>
        <TextField
          fullWidth
          size="small"
          placeholder="Search conversations"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <SearchIcon fontSize="small" />
              </InputAdornment>
            ),
          }}
        />
      </Box>
      
      <Divider />
      
      {/* Chat List */}
      <List sx={{ flexGrow: 1, overflow: 'auto' }}>
        {Array.isArray(filteredChats) && filteredChats.length > 0 ? (
          filteredChats.map((chat) => {
            if (!chat || !chat._id) {
              console.warn('Invalid chat object:', chat);
              return null;
            }
            const unreadCount = getUnreadCountForChat(chat._id);
            const isSelected = selectedChat && selectedChat._id === chat._id;
            
            return (
              <ListItem 
                key={chat._id} 
                disablePadding 
                secondaryAction={
                  <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end' }}>
                    <Typography variant="caption" color="text.secondary">
                      {chat.latestMessage && formatTimestamp(chat.latestMessage.createdAt)}
                    </Typography>
                    {unreadCount > 0 && (
                      <Badge 
                        badgeContent={unreadCount} 
                        color="error" 
                        sx={{ mt: 1 }}
                      />
                    )}
                  </Box>
                }
              >
                <ListItemButton 
                  selected={isSelected}
                  onClick={() => handleSelectChat(chat)}
                  sx={{ 
                    borderRadius: 1,
                    m: 0.5,
                    '&.Mui-selected': {
                      backgroundColor: 'primary.light',
                    },
                    position: 'relative',
                    ...(unreadCount > 0 && {
                      '&::before': {
                        content: '""',
                        position: 'absolute',
                        left: 0,
                        top: '50%',
                        transform: 'translateY(-50%)',
                        width: '4px',
                        height: '70%',
                        backgroundColor: 'error.main',
                        borderRadius: '0 2px 2px 0'
                      }
                    })
                  }}
                >
                  <ListItemAvatar>
                    <Avatar>
                      {getChatName(chat).charAt(0).toUpperCase()}
                    </Avatar>
                  </ListItemAvatar>
                  <ListItemText 
                    primary={getChatName(chat)}
                    secondary={getLatestMessagePreview(chat)}
                    primaryTypographyProps={{
                      fontWeight: unreadCount > 0 ? 700 : 400,
                      variant: 'body1',
                      noWrap: true
                    }}
                    secondaryTypographyProps={{
                      noWrap: true,
                      color: unreadCount > 0 ? 'text.primary' : 'text.secondary',
                      fontWeight: unreadCount > 0 ? 500 : 400,
                    }}
                  />
                  <IconButton edge="end" size="small" onClick={(event) => handleMenuOpen(event, chat)}>
                    <MoreVertIcon fontSize="small" />
                  </IconButton>
                </ListItemButton>
              </ListItem>
            );
          })
        ) : (
          <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', py: 4 }}>
            <Typography color="text.secondary" sx={{ mb: 2 }}>
              No conversations yet
            </Typography>
            <Button 
              variant="outlined" 
              onClick={() => setOpenUserSearch(true)}
              startIcon={<AddIcon />}
              size="small"
            >
              Start a conversation
            </Button>
          </Box>
        )}
      </List>

      {/* Modals */}
      <NewGroupChatModal 
        open={openGroupModal} 
        handleClose={() => setOpenGroupModal(false)}
        refreshChats={refreshChats}
      />
      
      <UserSearchDrawer 
        open={openUserSearch}
        handleClose={() => setOpenUserSearch(false)}
        onUserSelect={handleUserSelect}
      />
      
      {/* Chat Options Menu */}
      <Menu
        anchorEl={menuAnchorEl}
        open={Boolean(menuAnchorEl)}
        onClose={handleMenuClose}
        anchorOrigin={{
          vertical: 'top',
          horizontal: 'right',
        }}
      >
        <MenuItem onClick={() => selectedChatForMenu && hideChat(selectedChatForMenu._id)}>
          <ArchiveIcon fontSize="small" sx={{ mr: 1 }} />
          Remove from chat list
        </MenuItem>
      </Menu>
    </Box>
  );
};

export default ChatListSidebar;
