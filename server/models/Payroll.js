import mongoose from "mongoose";

const payrollSchema = new mongoose.Schema({
  employeeId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Employee',
    required: true
  },
  referenceId: {
    type: String,
    unique: true, // Ensures uniqueness
    default: function() {
      // Generate a unique reference ID combining employee, month and year with a timestamp
      return `${this.employeeId}-${this.month}-${this.year}-${Date.now()}`;
    }
  },
  month: {
    type: Number,
    required: true,
    min: 1,
    max: 12
  },
  year: {
    type: Number,
    required: true,
    min: 2020,
    max: 2100
  },
  // Basic details (from Employee model)
  employeeDetails: {
    name: { type: String },
    employeeID: { type: String },
    department: { type: String },
    position: { type: String },
    joiningDate: { type: Date },
    bankDetails: {
      bankName: { type: String },
      accountNumber: { type: String },
      accountHolderName: { type: String },
      ifscCode: { type: String }
    }
  },
  // Attendance details
  attendanceSummary: {
    present: { type: Number, default: 0 },
    absent: { type: Number, default: 0 },
    late: { type: Number, default: 0 },
    onLeave: { type: Number, default: 0 },
    workingDays: { type: Number, default: 0 },
    totalWorkingDays: { type: Number, default: 0 }
  },
  // Original salary (full amount before proration)
  originalSalary: {
    type: Number,
    default: 1, // Default full month salary
  },
  // Salary components
  basicSalary: {
    type: Number,
    default: 0,
    required: true
  },
  allowances: {
    houseRent: { type: Number, default: 0 },
    medical: { type: Number, default: 0 },
    travel: { type: Number, default: 0 },
    food: { type: Number, default: 0 },
    special: { type: Number, default: 0 },
    other: { type: Number, default: 0 }
  },
  deductions: {
    professionalTax: { type: Number, default: 150 },
    incomeTax: { type: Number, default: 0 },
    providentFund: { type: Number, default: 719.88 },
    healthInsurance: { type: Number, default: 299.95 },
    loanRepayment: { type: Number, default: 0 },
    absentDeduction: { type: Number, default: 0 },
    lateDeduction: { type: Number, default: 193.52 },
    other: { type: Number, default: 0 }
  },
  overtime: {
    hours: { type: Number, default: 0 },
    rate: { type: Number, default: 1.5 },
    amount: { type: Number, default: 0 }
  },
  bonus: { type: Number, default: 0 },
  // New: Detailed bonus information
  bonusDetails: {
    performanceBonus: { type: Number, default: 0 },
    festivalBonus: { type: Number, default: 0 },
    incentives: { type: Number, default: 0 },
    commission: { type: Number, default: 0 },
    oneTimeBonus: { type: Number, default: 0 },
    description: { type: String, default: '' }
  },
  // New: Enhanced tax calculation details
  taxDetails: {
    taxableIncome: { type: Number, default: 0 },
    taxBrackets: [{
      bracketStart: { type: Number },
      bracketEnd: { type: Number },
      taxRate: { type: Number },
      taxAmount: { type: Number }
    }],
    taxDeductions: {
      section80C: { type: Number, default: 0 },
      section80D: { type: Number, default: 0 },
      housingLoanInterest: { type: Number, default: 0 },
      educationLoanInterest: { type: Number, default: 0 },
      other: { type: Number, default: 0 }
    },
    finalTaxAmount: { type: Number, default: 0 }
  },
  leaveDeduction: { type: Number, default: 0 },
  grossSalary: { type: Number, default: 1857.75 },
  totalDeductions: { type: Number, default: 1363.35 },
  netSalary: { type: Number, default: 494.40 },
  paymentStatus: {
    type: String,
    enum: ['Pending', 'Processing', 'Paid', 'Failed'],
    default: 'Pending'
  },
  paymentMethod: {
    type: String,
    enum: ['Bank Transfer', 'Cash', 'Check', 'Other'],
    default: 'Bank Transfer'
  },
  paymentDate: {
    type: Date
  },
  remarks: { type: String },
  attendanceRecords: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Attendance'
  }],
  isAutoGenerated: {
    type: Boolean,
    default: true
  },
  lastCalculated: {
    type: Date,
    default: Date.now
  },
  manuallyEdited: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
});

// Helper function to format amount to 2 decimal places
const formatToDecimal = (amount) => {
  return Math.round(amount * 100) / 100;
};

// Pre-save middleware to calculate totals
payrollSchema.pre('save', function(next) {
  // Format all monetary values in allowances to 2 decimal places
  Object.keys(this.allowances).forEach(key => {
    this.allowances[key] = formatToDecimal(this.allowances[key] || 0);
  });
  
  // Format all monetary values in deductions to 2 decimal places
  Object.keys(this.deductions).forEach(key => {
    this.deductions[key] = formatToDecimal(this.deductions[key] || 0);
  });

  // Calculate and format bonus details
  if (this.bonusDetails) {
    Object.keys(this.bonusDetails).forEach(key => {
      if (key !== 'description') {
        this.bonusDetails[key] = formatToDecimal(this.bonusDetails[key] || 0);
      }
    });

    // Update total bonus from bonus details
    const totalBonus = formatToDecimal(
      (this.bonusDetails.performanceBonus || 0) +
      (this.bonusDetails.festivalBonus || 0) +
      (this.bonusDetails.incentives || 0) +
      (this.bonusDetails.commission || 0) +
      (this.bonusDetails.oneTimeBonus || 0)
    );
    this.bonus = totalBonus;
  }
  
  // Calculate total allowances
  const allowanceTotal = formatToDecimal(
    Object.values(this.allowances).reduce((sum, val) => sum + (val || 0), 0)
  );
  
  // Calculate total deductions (excluding leave deduction which is handled separately)
  const deductionTotal = formatToDecimal(
    Object.values(this.deductions).reduce((sum, val) => sum + (val || 0), 0)
  );
  
  // Calculate and format overtime
  this.overtime.rate = formatToDecimal(this.overtime.rate || 1.5);
  this.overtime.amount = formatToDecimal((this.overtime.hours || 0) * (this.overtime.rate || 1.5));
  
  // Format basic salary values
  this.originalSalary = formatToDecimal(this.originalSalary || 15300);
  this.basicSalary = formatToDecimal(this.basicSalary || 0);
  this.bonus = formatToDecimal(this.bonus || 0);
  this.leaveDeduction = formatToDecimal(this.leaveDeduction || 0);
  
  // Calculate gross salary
  this.grossSalary = formatToDecimal(
    this.basicSalary + allowanceTotal + this.bonus + this.overtime.amount
  );
  
  // Calculate total deductions (including leave deduction)
  this.totalDeductions = formatToDecimal(deductionTotal + this.leaveDeduction);
  
  // Calculate net salary
  this.netSalary = formatToDecimal(this.grossSalary - this.totalDeductions);

  // Update tax details if present
  if (this.taxDetails) {
    this.taxDetails.finalTaxAmount = formatToDecimal(this.taxDetails.finalTaxAmount || 0);
    this.taxDetails.taxableIncome = formatToDecimal(this.taxDetails.taxableIncome || 0);
    
    // Make sure tax deductions on both are in sync
    if (this.taxDetails.finalTaxAmount) {
      this.deductions.incomeTax = this.taxDetails.finalTaxAmount;
    }
  }
  
  next();
});

// Compound index for faster queries
payrollSchema.index({ employeeId: 1, month: 1, year: 1 }, { unique: true });
payrollSchema.index({ paymentStatus: 1 });
payrollSchema.index({ month: 1, year: 1 });

const Payroll = mongoose.model("Payroll", payrollSchema);

export default Payroll;
